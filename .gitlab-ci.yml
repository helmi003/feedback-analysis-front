variables:
  DOCKER_TLS_CERTDIR: '/certs'
  SONAR_HOST_URL: "https://158c6a719afc.ngrok-free.app"

default:
  image: node:22
  services:
    - docker:24.0.5-dind

stages:
  - install
  - test
  - build
  - monitoring
  - deploy

install-dependencies-job:
  stage: install
  script:
    - echo "Installing dependencies..."
    - yarn
    - echo "Dependencies installed."
  cache:
    key: deps-$CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# unit-test-job:
#   stage: test
#   script:
#     - echo "Running unit tests..."
#     - yarn test:run
#     - echo "Unit tests completed."
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job']
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# lint-test-job:
#   stage: test
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job']
#   script:
#     - echo "Running lint tests..."
#     - yarn lint
#     - echo "Lint tests completed."
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# coverage-test-job:
#   stage: test
#   script:
#     - echo "Running tests with coverage..."
#     - yarn test:coverage
#     - echo "Coverage tests completed."
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job']
#   artifacts:
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage/cobertura-coverage.xml
#     paths:
#       - coverage/
#     expire_in: 1 week
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# sonar-test-job:
#   stage: test
#   image: sonarsource/sonar-scanner-cli:latest
#   variables:
#     SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar'
#     GIT_DEPTH: '0'
#   script:
#     - echo "🔍 Starting SonarQube analysis..."
#     - echo "Using SonarQube server:" $SONAR_HOST_URL
#     - sonar-scanner
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job', 'coverage-test-job']
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

grafana-dashboard-deploy:
  stage: deploy
  image: curlimages/curl:latest
  variables:
    GRAFANA_URL: "http://your-grafana-instance:3000"
    GRAFANA_API_KEY: "$GRAFANA_API_TOKEN"
  script:
    - echo "📊 Deploying Grafana dashboards..."
    - echo "Grafana URL:" $GRAFANA_URL
    - |
      if [ -d "monitoring/grafana/dashboards" ]; then
        for dashboard in monitoring/grafana/dashboards/*.json; do
          echo "Uploading dashboard: $(basename $dashboard)"
          curl -X POST \
            -H "Authorization: Bearer $GRAFANA_API_KEY" \
            -H "Content-Type: application/json" \
            -d @"$dashboard" \
            "$GRAFANA_URL/api/dashboards/db"
        done
      else
        echo "No dashboards found in monitoring/grafana/dashboards/"
      fi
    - echo "✅ Grafana dashboard deployment completed."
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)
  needs: []

# build-docker-image-job:
#   stage: build
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#   before_script:
#     - docker info
#     - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
#     - apk add --no-cache --upgrade bash git
#   script:
#     - echo "Building docker image..."
#     - BUILD_ENVIRONMENT=$(echo "$CI_COMMIT_TAG" | cut -d '-' -f1)
#     - echo "CI_COMMIT_REF_NAME is $CI_COMMIT_REF_NAME"
#     - echo "BUILD_ENVIRONMENT is $BUILD_ENVIRONMENT"
#     - chmod +x ./build-docker-image.sh
#     - ./build-docker-image.sh $BUILD_ENVIRONMENT --push
#   needs: ['unit-test-job', 'lint-test-job']
#   rules:
#     - if: ($CI_COMMIT_TAG =~ /^staging-/ || $CI_COMMIT_TAG =~ /^production-/)

# deploy-job:
#   image: ubuntu:latest
#   stage: deploy
#   before_script:
#     - apt update; apt install -y git curl zip unzip openssh-client openssh-server
#     - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#     - unzip awscliv2.zip
#     - chmod +x aws/install
#     - ./aws/install
#   script:
#     - export AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID
#     - export AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY
#     - aws s3 cp s3://gofield-certificates/ec2-ssh-keys/production-ready-instance.pem production-ready-instance.pem
#     - chmod 600 production-ready-instance.pem
#     - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
#     - ssh-keyscan $CI_VM_IPADDRESS >> ~/.ssh/known_hosts
#     - ssh -i production-ready-instance.pem ubuntu@$CI_VM_IPADDRESS "cd docker-compose-deployment/production; ./ec2-deploy.sh server"
#   needs: ['build-docker-image-job']
#   rules:
#     - if: ($CI_COMMIT_TAG =~ /^staging-/ || $CI_COMMIT_TAG =~ /^production-/)

grafana-monitoring-job:
  stage: monitoring
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "🔍 Setting up and testing Grafana..."
    - docker pull grafana/grafana:latest
    - echo "✅ Grafana image pulled successfully"
    - echo "🚀 Starting Grafana container for testing..."
    - docker run -d --name grafana-test -p 3000:3000 grafana/grafana:latest
    - echo "⏳ Waiting for Grafana to start..."
    - sleep 30
    - echo "🔍 Testing Grafana health endpoint..."
    - docker exec grafana-test curl -f http://localhost:3000/api/health || exit 1
    - echo "🔍 Testing Grafana login page..."
    - docker exec grafana-test curl -f http://localhost:3000/login || exit 1
    - echo "✅ Grafana is running and responding correctly!"
    - docker stop grafana-test
    - docker rm grafana-test
    - echo "🧹 Cleanup completed"
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)