variables:
  DOCKER_TLS_CERTDIR: '/certs'
  SONAR_HOST_URL: "https://158c6a719afc.ngrok-free.app"

default:
  image: node:22

stages:
  - install
  - test
  - build
  - deploy

install-dependencies-job:
  stage: install
  script:
    - echo "Installing dependencies..."
    - yarn
    - echo "Dependencies installed."
  cache:
    key: deps-$CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/ || $CI_COMMIT_BRANCH == "main")

unit-test-job:
  stage: test
  script:
    - echo "Running unit tests..."
    - yarn test:run
    - echo "Unit tests completed."
  cache:
    key: deps-$CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
    policy: pull
  needs: ['install-dependencies-job']
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

lint-test-job:
  stage: test
  cache:
    key: deps-$CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
    policy: pull
  needs: ['install-dependencies-job']
  script:
    - echo "Running lint tests..."
    - yarn lint
    - echo "Lint tests completed."
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

coverage-test-job:
  stage: test
  script:
    - echo "Running tests with coverage..."
    - yarn test:coverage
    - echo "Coverage tests completed."
  cache:
    key: deps-$CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
    policy: pull
  needs: ['install-dependencies-job']
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

sonar-test-job:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar'
    GIT_DEPTH: '0'
  script:
    - echo "üîç Starting SonarQube analysis..."
    - echo "Using SonarQube server:" $SONAR_HOST_URL
    - sonar-scanner
  cache:
    key: deps-$CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
    policy: pull
  needs: ['install-dependencies-job', 'coverage-test-job']
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

build-job:
  stage: build
  script:
    - echo "üöÄ Building React app for deployment..."
    - yarn install
    - yarn build
    - echo "‚úÖ Build completed successfully!"
  artifacts:
    name: "feedback-analysis-front-$CI_COMMIT_SHA"
    paths:
      - dist/
    expire_in: 1 week
  needs: ['install-dependencies-job']
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == "merge_request_event")

build-docker-image-job:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
    - apk add --no-cache --upgrade bash git
  script:
    - echo "üê≥ Building Docker image..."
    - echo "Building image for main branch deployment"
    - docker build -t "$CI_REGISTRY_IMAGE:main-$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:main-$CI_COMMIT_SHA"
    - docker tag "$CI_REGISTRY_IMAGE:main-$CI_COMMIT_SHA" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - echo "‚úÖ Docker image built and pushed successfully!"
    - echo "üê≥ Image:$CI_REGISTRY_IMAGE:main-$CI_COMMIT_SHA"
    - echo "üê≥ Latest:$CI_REGISTRY_IMAGE:latest"
  needs: ['install-dependencies-job']
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == "merge_request_event")

deploy-job:
  stage: deploy
  script:
    - echo "üéâ Deployment Ready!"
    - echo "üåê Live deployment https://feedback-analysis.netlify.app"
    - echo "üê≥ Docker image $CI_REGISTRY_IMAGE:main-$CI_COMMIT_SHA"
    - echo "üì¶ Static artifacts available for download"
    - echo ""
    - echo "‚úÖ Your app is deployed in multiple formats"
    - echo "‚Ä¢ Netlify (live) https://feedback-analysis.netlify.app"
    - echo "‚Ä¢ Docker image Ready for container deployment"
    - echo "‚Ä¢ Static files Available as build artifacts"
  needs: ['build-job', 'build-docker-image-job']
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == "merge_request_event")