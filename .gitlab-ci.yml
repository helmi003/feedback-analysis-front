variables:
  DOCKER_TLS_CERTDIR: '/certs'
  SONAR_HOST_URL: "https://158c6a719afc.ngrok-free.app"

default:
  image: node:22
  services:
    - docker:24.0.5-dind

stages:
  - install
  - test
  - build
  - monitoring
  - deploy

install-dependencies-job:
  stage: install
  script:
    - echo "Installing dependencies..."
    - yarn
    - echo "Dependencies installed."
  cache:
    key: deps-$CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# unit-test-job:
#   stage: test
#   script:
#     - echo "Running unit tests..."
#     - yarn test:run
#     - echo "Unit tests completed."
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job']
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# lint-test-job:
#   stage: test
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job']
#   script:
#     - echo "Running lint tests..."
#     - yarn lint
#     - echo "Lint tests completed."
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# coverage-test-job:
#   stage: test
#   script:
#     - echo "Running tests with coverage..."
#     - yarn test:coverage
#     - echo "Coverage tests completed."
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job']
#   artifacts:
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage/cobertura-coverage.xml
#     paths:
#       - coverage/
#     expire_in: 1 week
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# sonar-test-job:
#   stage: test
#   image: sonarsource/sonar-scanner-cli:latest
#   variables:
#     SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar'
#     GIT_DEPTH: '0'
#   script:
#     - echo "🔍 Starting SonarQube analysis..."
#     - echo "Using SonarQube server:" $SONAR_HOST_URL
#     - sonar-scanner
#   cache:
#     key: deps-$CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   needs: ['install-dependencies-job', 'coverage-test-job']
#   rules:
#     - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# build-docker-image-job:
#   stage: build
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#   before_script:
#     - docker info
#     - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
#     - apk add --no-cache --upgrade bash git
#   script:
#     - echo "Building docker image..."
#     - BUILD_ENVIRONMENT=$(echo "$CI_COMMIT_TAG" | cut -d '-' -f1)
#     - echo "CI_COMMIT_REF_NAME is $CI_COMMIT_REF_NAME"
#     - echo "BUILD_ENVIRONMENT is $BUILD_ENVIRONMENT"
#     - chmod +x ./build-docker-image.sh
#     - ./build-docker-image.sh $BUILD_ENVIRONMENT --push
#   needs: ['unit-test-job', 'lint-test-job']
#   rules:
#     - if: ($CI_COMMIT_TAG =~ /^staging-/ || $CI_COMMIT_TAG =~ /^production-/)

grafana-monitoring:
  stage: monitoring
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
    - name: grafana/grafana:latest
      alias: grafana
    - name: prom/prometheus:latest
      alias: prometheus
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    GRAFANA_ADMIN_PASSWORD: "admin123"
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      echo "🔄 Waiting for services to initialize..."
      sleep 45
      
      echo "� Checking service health..."
      curl -f http://grafana:3000/api/health || echo "Grafana not ready yet"
      curl -f http://prometheus:9090/-/healthy || echo "Prometheus not ready yet"
      
      echo "🔗 Setting up Grafana admin API key..."
      # Create API key for admin user
      API_KEY_RESPONSE=$(curl -X POST "http://grafana:3000/api/auth/keys" \
        -H "Content-Type: application/json" \
        -u "admin:${GRAFANA_ADMIN_PASSWORD}" \
        -d '{"name":"ci-pipeline","role":"Admin"}' || echo "Failed to create API key")
      
      if [ "$API_KEY_RESPONSE" != "Failed to create API key" ]; then
        GRAFANA_API_KEY=$(echo $API_KEY_RESPONSE | jq -r '.key')
        
        echo "🔗 Connecting Grafana to Prometheus..."
        curl -X POST "http://grafana:3000/api/datasources" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $GRAFANA_API_KEY" \
          -d '{
            "name":"Prometheus",
            "type":"prometheus",
            "url":"http://prometheus:9090",
            "access":"proxy",
            "isDefault":true
          }' || echo "Failed to add datasource"
        
        echo "📊 Importing dashboards..."
        if [ -d "monitoring/grafana/dashboards" ]; then
          for dashboard in monitoring/grafana/dashboards/*.json; do
            if [ -f "$dashboard" ]; then
              echo "Importing $(basename $dashboard)"
              curl -X POST "http://grafana:3000/api/dashboards/db" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $GRAFANA_API_KEY" \
                -d @"$dashboard" || echo "Failed to import $(basename $dashboard)"
            fi
          done
        else
          echo "No dashboard directory found"
        fi
      else
        echo "❌ Failed to create Grafana API key"
        exit 1
      fi
      
      echo "✅ Monitoring setup completed successfully!"
  needs: ['install-dependencies-job']
  artifacts:
    when: always
    expire_in: 1 hour
    reports:
      junit: []
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

validate-monitoring:
  stage: monitoring
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      echo "🧪 Validating monitoring configuration files..."
      
      # Check if monitoring files exist
      if [ ! -f "monitoring/prometheus/prometheus.yml" ]; then
        echo "❌ Prometheus configuration missing"
        exit 1
      fi
      
      if [ ! -f "monitoring/grafana/dashboards/frontend-monitoring.json" ]; then
        echo "❌ Grafana dashboard missing"
        exit 1
      fi
      
      if [ ! -f "docker-compose.monitoring.yml" ]; then
        echo "❌ Monitoring docker-compose file missing"
        exit 1
      fi
      
      echo "✅ All monitoring configuration files are present"
      
      # Validate JSON files
      echo "🔍 Validating JSON configuration..."
      if command -v jq >/dev/null 2>&1; then
        apk add --no-cache jq
      fi
      
      jq . monitoring/grafana/dashboards/frontend-monitoring.json > /dev/null || {
        echo "❌ Invalid JSON in dashboard file"
        exit 1
      }
      
      echo "✅ Monitoring validation completed successfully!"
  needs: ['install-dependencies-job']
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG =~ /^production-/ || $CI_COMMIT_TAG =~ /^staging-/)

# deploy-job:
#   image: ubuntu:latest
#   stage: deploy
#   before_script:
#     - apt update; apt install -y git curl zip unzip openssh-client openssh-server
#     - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#     - unzip awscliv2.zip
#     - chmod +x aws/install
#     - ./aws/install
#   script:
#     - export AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID
#     - export AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY
#     - aws s3 cp s3://gofield-certificates/ec2-ssh-keys/production-ready-instance.pem production-ready-instance.pem
#     - chmod 600 production-ready-instance.pem
#     - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
#     - ssh-keyscan $CI_VM_IPADDRESS >> ~/.ssh/known_hosts
#     - ssh -i production-ready-instance.pem ubuntu@$CI_VM_IPADDRESS "cd docker-compose-deployment/production; ./ec2-deploy.sh server"
#   needs: ['build-docker-image-job']
#   rules:
#     - if: ($CI_COMMIT_TAG =~ /^staging-/ || $CI_COMMIT_TAG =~ /^production-/)